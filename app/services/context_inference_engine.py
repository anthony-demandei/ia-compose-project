"""
Context Inference Engine - An√°lise sem√¢ntica inteligente para evitar perguntas redundantes.
Usa GPT-4 para extrair informa√ß√µes impl√≠citas e √≥bvias do texto de entrada.
"""

import json
from typing import Dict, List, Set, Optional, Any
from dataclasses import dataclass, field
from enum import Enum
from openai import AsyncOpenAI

from app.utils.pii_safe_logging import get_pii_safe_logger

logger = get_pii_safe_logger(__name__)


class InferenceConfidence(Enum):
    """N√≠veis de confian√ßa na infer√™ncia."""

    CERTAIN = "certain"  # 95%+ certeza - n√£o perguntar
    LIKELY = "likely"  # 80%+ certeza - perguntar se cr√≠tico
    POSSIBLE = "possible"  # 60%+ certeza - perguntar normalmente
    UNKNOWN = "unknown"  # < 60% certeza - sempre perguntar


@dataclass
class InferredInformation:
    """Informa√ß√£o inferida do contexto."""

    category: str  # "domain", "functionality", "user_type", etc.
    key: str  # identificador espec√≠fico
    value: Any  # valor inferido
    confidence: InferenceConfidence
    reasoning: str  # explica√ß√£o da infer√™ncia
    evidence: List[str] = field(default_factory=list)  # trechos que levaram √† infer√™ncia


@dataclass
class DomainContext:
    """Contexto espec√≠fico de um dom√≠nio."""

    domain: str
    characteristics: List[str]
    implied_requirements: List[str]
    automatic_assumptions: Dict[str, Any]
    typical_integrations: List[str]
    compliance_requirements: List[str]


@dataclass
class InferenceResult:
    """Resultado completo da an√°lise de infer√™ncia."""

    inferred_info: List[InferredInformation] = field(default_factory=list)
    detected_domain: Optional[str] = None
    domain_confidence: float = 0.0
    obvious_answers: Dict[str, Any] = field(default_factory=dict)  # respostas √≥bvias
    redundant_question_ids: Set[str] = field(default_factory=set)  # perguntas a evitar
    focus_areas: List[str] = field(default_factory=list)  # √°reas que precisam de perguntas
    reasoning_summary: str = ""


class ContextInferenceEngine:
    """
    Motor de infer√™ncia que analisa texto de entrada e extrai informa√ß√µes impl√≠citas.

    Evita perguntas redundantes identificando o que j√° √© √≥bvio pelo contexto.
    """

    def __init__(self, api_key: str, model: str = None):
        """
        Inicializa o motor de infer√™ncia.

        Args:
            api_key: Chave da OpenAI API
            model: Modelo a usar para an√°lise (usa configura√ß√£o do ENV se n√£o especificado)
        """
        from app.utils.config import get_settings

        settings = get_settings()
        self.client = AsyncOpenAI(api_key=api_key)
        self.model = model or settings.openai_model
        self.temperature = 0.1  # Baixa para respostas mais consistentes

        # Conhecimento de dom√≠nios
        self.domain_knowledge = self._initialize_domain_knowledge()

        # Cache de infer√™ncias
        self.inference_cache: Dict[str, InferenceResult] = {}

        logger.info("Context Inference Engine initialized")

    def _initialize_domain_knowledge(self) -> Dict[str, DomainContext]:
        """
        Inicializa conhecimento de dom√≠nios espec√≠ficos para melhor detec√ß√£o contextual.

        Sistema V3.0 Universal com Especializa√ß√£o Inteligente:
        - Detecta automaticamente o dom√≠nio via IA
        - Aplica conhecimento espec√≠fico quando dispon√≠vel
        - Funciona universalmente mesmo sem conhecimento espec√≠fico
        """
        return {
            # Dom√≠nio gen√©rico (fallback universal)
            "_generic": DomainContext(
                domain="generic",
                characteristics=["desenvolvimento", "sistema", "software"],
                implied_requirements=["funcionalidade", "qualidade", "entrega"],
                automatic_assumptions={},
                typical_integrations=[],
                compliance_requirements=["LGPD"],
            ),
            # üè¶ Fintech - Servi√ßos financeiros
            "fintech": DomainContext(
                domain="fintech",
                characteristics=[
                    "pagamentos",
                    "investimentos",
                    "bancos",
                    "carteiras digitais",
                    "criptomoedas",
                ],
                implied_requirements=["alta seguran√ßa", "auditoria", "backup", "monitoramento"],
                automatic_assumptions={
                    "handles_sensitive_data": True,
                    "requires_high_security": True,
                    "needs_compliance": True,
                    "requires_audit_trail": True,
                },
                typical_integrations=[
                    "gateway de pagamento",
                    "APIs banc√°rias",
                    "KYC/AML",
                    "contabilidade",
                ],
                compliance_requirements=["PCI DSS", "LGPD", "Banco Central", "CVM"],
            ),
            # üè• Healthcare - Sa√∫de e medicina
            "healthcare": DomainContext(
                domain="healthcare",
                characteristics=[
                    "sa√∫de",
                    "m√©dico",
                    "hospital",
                    "cl√≠nica",
                    "telemedicina",
                    "prontu√°rio",
                ],
                implied_requirements=[
                    "privacidade de dados",
                    "backup seguro",
                    "disponibilidade 24/7",
                ],
                automatic_assumptions={
                    "handles_sensitive_data": True,
                    "requires_high_security": True,
                    "needs_compliance": True,
                    "requires_data_encryption": True,
                },
                typical_integrations=[
                    "sistemas hospitalares",
                    "laborat√≥rios",
                    "farm√°cias",
                    "conv√™nios",
                ],
                compliance_requirements=["LGPD", "CFM", "ANVISA", "HIPAA"],
            ),
            # üéì Education - Educa√ß√£o e e-learning
            "education": DomainContext(
                domain="education",
                characteristics=[
                    "educa√ß√£o",
                    "escola",
                    "universidade",
                    "curso",
                    "e-learning",
                    "LMS",
                ],
                implied_requirements=["escalabilidade", "acessibilidade", "gamifica√ß√£o"],
                automatic_assumptions={
                    "multi_user_system": True,
                    "requires_user_management": True,
                    "needs_reporting": True,
                },
                typical_integrations=[
                    "sistemas de avalia√ß√£o",
                    "bibliotecas",
                    "videoconfer√™ncia",
                    "pagamentos",
                ],
                compliance_requirements=["LGPD", "MEC", "acessibilidade WCAG"],
            ),
            # üõí E-commerce - Com√©rcio eletr√¥nico
            "ecommerce": DomainContext(
                domain="ecommerce",
                characteristics=[
                    "loja virtual",
                    "marketplace",
                    "vendas online",
                    "cat√°logo",
                    "checkout",
                ],
                implied_requirements=["performance", "SEO", "mobile-first", "analytics"],
                automatic_assumptions={
                    "requires_payment_integration": True,
                    "needs_inventory_management": True,
                    "requires_shipping_calculation": True,
                },
                typical_integrations=[
                    "gateways de pagamento",
                    "correios",
                    "ERP",
                    "email marketing",
                ],
                compliance_requirements=["LGPD", "C√≥digo do Consumidor", "PCI DSS"],
            ),
            # üè≠ Industry - Ind√∫stria e manufatura
            "industry": DomainContext(
                domain="industry",
                characteristics=[
                    "ind√∫stria",
                    "manufatura",
                    "produ√ß√£o",
                    "f√°brica",
                    "automa√ß√£o industrial",
                ],
                implied_requirements=["tempo real", "IoT", "monitoramento", "dashboards"],
                automatic_assumptions={
                    "requires_real_time_data": True,
                    "needs_industrial_protocols": True,
                    "requires_reliability": True,
                },
                typical_integrations=["sensores IoT", "PLCs", "SCADA", "MES", "ERP"],
                compliance_requirements=["LGPD", "ISO 9001", "normas de seguran√ßa"],
            ),
            # üè¢ Real Estate - Imobili√°rio
            "real_estate": DomainContext(
                domain="real_estate",
                characteristics=["imobili√°rio", "im√≥veis", "corretora", "aluguel", "venda"],
                implied_requirements=["busca avan√ßada", "geolocaliza√ß√£o", "fotos/v√≠deos"],
                automatic_assumptions={
                    "requires_search_filters": True,
                    "needs_location_services": True,
                    "requires_media_handling": True,
                },
                typical_integrations=["mapas", "financiamento", "documenta√ß√£o", "CRM"],
                compliance_requirements=["LGPD", "CRECI", "c√≥digo civil"],
            ),
            # üöó Automotive - Automotivo
            "automotive": DomainContext(
                domain="automotive",
                characteristics=["automotivo", "carros", "concession√°ria", "oficina", "pe√ßas"],
                implied_requirements=["cat√°logo complexo", "compatibilidade", "estoque"],
                automatic_assumptions={
                    "requires_parts_compatibility": True,
                    "needs_inventory_management": True,
                    "requires_service_scheduling": True,
                },
                typical_integrations=[
                    "fabricantes",
                    "distribuidores",
                    "seguradoras",
                    "financeiras",
                ],
                compliance_requirements=["LGPD", "DENATRAN", "normas t√©cnicas"],
            ),
            # üéÆ Gaming - Jogos e entretenimento
            "gaming": DomainContext(
                domain="gaming",
                characteristics=["jogo", "game", "entretenimento", "multiplayer", "streaming"],
                implied_requirements=["baixa lat√™ncia", "escalabilidade", "anti-cheat"],
                automatic_assumptions={
                    "requires_real_time_communication": True,
                    "needs_user_authentication": True,
                    "requires_performance_optimization": True,
                },
                typical_integrations=[
                    "plataformas de jogos",
                    "payment processors",
                    "streaming",
                    "analytics",
                ],
                compliance_requirements=["LGPD", "classifica√ß√£o et√°ria", "termos de uso"],
            ),
            # üì∫ Media - M√≠dia e conte√∫do
            "media": DomainContext(
                domain="media",
                characteristics=["m√≠dia", "streaming", "v√≠deo", "√°udio", "conte√∫do", "publica√ß√£o"],
                implied_requirements=["CDN", "transcodifica√ß√£o", "DRM", "analytics"],
                automatic_assumptions={
                    "requires_media_processing": True,
                    "needs_content_delivery": True,
                    "requires_rights_management": True,
                },
                typical_integrations=["CDNs", "transcodifica√ß√£o", "analytics", "monetiza√ß√£o"],
                compliance_requirements=["LGPD", "direitos autorais", "classifica√ß√£o"],
            ),
            # ‚öñÔ∏è Legal - Jur√≠dico e advocacia
            "legal": DomainContext(
                domain="legal",
                characteristics=["jur√≠dico", "advocacia", "escrit√≥rio", "processos", "contratos"],
                implied_requirements=[
                    "confidencialidade",
                    "auditoria",
                    "backup",
                    "assinatura digital",
                ],
                automatic_assumptions={
                    "handles_confidential_data": True,
                    "requires_document_management": True,
                    "needs_deadline_tracking": True,
                },
                typical_integrations=["tribunais", "cart√≥rios", "assinatura digital", "timesheet"],
                compliance_requirements=["LGPD", "OAB", "Marco Civil da Internet"],
            ),
            # üçî Food & Beverage - Alimenta√ß√£o
            "food_beverage": DomainContext(
                domain="food_beverage",
                characteristics=["restaurante", "delivery", "comida", "card√°pio", "pedidos"],
                implied_requirements=["tempo real", "geolocaliza√ß√£o", "pagamentos", "avalia√ß√µes"],
                automatic_assumptions={
                    "requires_order_management": True,
                    "needs_delivery_tracking": True,
                    "requires_payment_processing": True,
                },
                typical_integrations=["delivery platforms", "POS", "pagamentos", "avalia√ß√µes"],
                compliance_requirements=["LGPD", "ANVISA", "c√≥digo sanit√°rio"],
            ),
            # ‚úàÔ∏è Travel - Turismo e viagens
            "travel": DomainContext(
                domain="travel",
                characteristics=["turismo", "viagem", "hotel", "reserva", "booking"],
                implied_requirements=["disponibilidade", "pagamentos", "calend√°rios", "mapas"],
                automatic_assumptions={
                    "requires_booking_system": True,
                    "needs_payment_processing": True,
                    "requires_calendar_integration": True,
                },
                typical_integrations=["GDS", "hot√©is", "companhias a√©reas", "pagamentos"],
                compliance_requirements=["LGPD", "EMBRATUR", "normas internacionais"],
            ),
            # üíº HR - Recursos Humanos
            "hr": DomainContext(
                domain="hr",
                characteristics=[
                    "RH",
                    "recursos humanos",
                    "recrutamento",
                    "folha",
                    "colaboradores",
                ],
                implied_requirements=["privacidade", "relat√≥rios", "integra√ß√µes", "workflow"],
                automatic_assumptions={
                    "handles_personal_data": True,
                    "requires_workflow_management": True,
                    "needs_reporting_tools": True,
                },
                typical_integrations=[
                    "folha de pagamento",
                    "contabilidade",
                    "benef√≠cios",
                    "treinamentos",
                ],
                compliance_requirements=["LGPD", "CLT", "eSocial"],
            ),
            # üìä Analytics - BI e relat√≥rios
            "analytics": DomainContext(
                domain="analytics",
                characteristics=["BI", "analytics", "dashboard", "relat√≥rios", "m√©tricas", "KPIs"],
                implied_requirements=["performance", "visualiza√ß√µes", "tempo real", "exporta√ß√£o"],
                automatic_assumptions={
                    "requires_data_processing": True,
                    "needs_visualization_tools": True,
                    "requires_export_capabilities": True,
                },
                typical_integrations=["bancos de dados", "APIs", "ferramentas de BI", "exporta√ß√£o"],
                compliance_requirements=["LGPD", "auditoria de dados"],
            ),
            # üîí Security - Ciberseguran√ßa
            "security": DomainContext(
                domain="security",
                characteristics=[
                    "seguran√ßa",
                    "ciberseguran√ßa",
                    "monitoramento",
                    "firewall",
                    "antivirus",
                ],
                implied_requirements=["tempo real", "alertas", "logs", "compliance"],
                automatic_assumptions={
                    "requires_real_time_monitoring": True,
                    "needs_alert_system": True,
                    "requires_log_management": True,
                },
                typical_integrations=["SIEM", "threat intelligence", "compliance tools", "alertas"],
                compliance_requirements=["LGPD", "ISO 27001", "normas de seguran√ßa"],
            ),
        }

    async def analyze_context(self, intake_text: str) -> InferenceResult:
        """
        Analisa o texto de entrada e extrai informa√ß√µes impl√≠citas.

        Args:
            intake_text: Texto de descri√ß√£o do projeto

        Returns:
            InferenceResult com informa√ß√µes inferidas
        """
        try:
            # Verificar cache
            cache_key = self._generate_cache_key(intake_text)
            if cache_key in self.inference_cache:
                logger.info("Using cached inference result")
                return self.inference_cache[cache_key]

            logger.info("Analyzing context with AI inference")

            # 1. An√°lise inicial com GPT-4
            analysis = await self._analyze_with_gpt(intake_text)

            # 2. Detectar dom√≠nio principal
            domain_result = await self._detect_domain(intake_text, analysis)

            # 3. Aplicar conhecimento espec√≠fico do dom√≠nio
            domain_insights = self._apply_domain_knowledge(domain_result["domain"], analysis)

            # 4. Identificar respostas √≥bvias
            obvious_answers = self._identify_obvious_answers(intake_text, analysis, domain_insights)

            # 5. Identificar perguntas redundantes
            redundant_questions = await self._identify_redundant_questions(
                obvious_answers, analysis
            )

            # 6. Sugerir √°reas de foco
            focus_areas = self._suggest_focus_areas(analysis, obvious_answers)

            # 7. Compilar resultado
            result = InferenceResult(
                inferred_info=self._compile_inferred_info(analysis, domain_insights),
                detected_domain=domain_result["domain"],
                domain_confidence=domain_result["confidence"],
                obvious_answers=obvious_answers,
                redundant_question_ids=redundant_questions,
                focus_areas=focus_areas,
                reasoning_summary=analysis.get("reasoning_summary", ""),
            )

            # Cache resultado
            self.inference_cache[cache_key] = result

            logger.info(
                f"Context analysis completed: domain={result.detected_domain}, "
                f"obvious_answers={len(result.obvious_answers)}, "
                f"redundant_questions={len(result.redundant_question_ids)}"
            )

            return result

        except Exception as e:
            logger.error(f"Error in context analysis: {str(e)}")
            # Retornar resultado vazio em caso de erro
            return InferenceResult()

    async def _analyze_with_gpt(self, intake_text: str) -> Dict[str, Any]:
        """An√°lise inicial usando GPT-4."""
        prompt = f"""
        Analise este texto de descri√ß√£o de projeto de software e extraia informa√ß√µes impl√≠citas:

        TEXTO: "{intake_text}"

        Extraia as seguintes informa√ß√µes (retorne JSON):
        {{
            "explicit_info": {{
                "mentioned_features": ["lista de funcionalidades mencionadas"],
                "mentioned_technologies": ["tecnologias mencionadas"],
                "mentioned_integrations": ["integra√ß√µes mencionadas"],
                "mentioned_user_types": ["tipos de usu√°rios mencionados"]
            }},
            "implicit_info": {{
                "implied_domain": "dom√≠nio inferido (fintech, ecommerce, healthcare, education, etc)",
                "implied_complexity": "low/medium/high",
                "implied_user_scale": "pequeno/m√©dio/grande",
                "implied_data_sensitivity": true/false,
                "implied_compliance_needs": ["requisitos de compliance inferidos"],
                "implied_security_level": "low/medium/high/maximum"
            }},
            "obvious_characteristics": {{
                "application_type": "web/mobile/desktop/h√≠brido - se √≥bvio",
                "primary_purpose": "finalidade principal se √≥bvia",
                "target_audience": "p√∫blico-alvo se √≥bvio",
                "business_model": "B2B/B2C/interno se √≥bvio"
            }},
            "missing_info": [
                "informa√ß√µes importantes que ainda precisam ser perguntadas"
            ],
            "reasoning_summary": "explica√ß√£o de 2-3 frases sobre as infer√™ncias feitas"
        }}

        IMPORTANTE:
        - Se algo N√ÉO est√° √≥bvio, marque como null
        - Se fintech/banco/investimento est√° mencionado, implica dados sens√≠veis = true
        - Se dashboard/gest√£o est√° mencionado, implica web app
        - Seja conservador - s√≥ marque como √≥bvio se REALMENTE est√° claro
        """

        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "Voc√™ √© um expert em an√°lise de requisitos de software. Extraia informa√ß√µes impl√≠citas de forma precisa e conservadora.",
                    },
                    {"role": "user", "content": prompt},
                ],
                temperature=self.temperature,
                max_tokens=1500,
                response_format={"type": "json_object"},
            )

            return json.loads(response.choices[0].message.content)

        except Exception as e:
            logger.error(f"Error in GPT analysis: {str(e)}")
            return {}

    async def _detect_domain(self, intake_text: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """
        Detecta contexto do projeto de forma universal.

        N√£o depende mais de dom√≠nios hardcoded, usa IA para detectar qualquer contexto.
        """
        # Usar an√°lise da IA como fonte prim√°ria
        implied_domain = analysis.get("implicit_info", {}).get("implied_domain", "generic")

        # Detectar contexto automaticamente via texto
        detected_context = await self._detect_context_with_ai(intake_text)

        # Usar contexto detectado ou fallback para impl√≠cito
        final_domain = detected_context.get("context", implied_domain)
        confidence = detected_context.get("confidence", 0.7)

        return {"domain": final_domain, "confidence": confidence}

    async def _detect_context_with_ai(self, intake_text: str) -> Dict[str, Any]:
        """Detecta contexto do projeto usando IA - funciona para qualquer dom√≠nio."""
        try:
            prompt = f"""
            Analise este briefing de projeto e identifique o contexto/dom√≠nio principal.
            
            BRIEFING: {intake_text}
            
            Retorne JSON:
            {{
                "context": "nome espec√≠fico do contexto/dom√≠nio detectado",
                "confidence": 0.0-1.0,
                "key_indicators": ["palavras-chave que indicam o contexto"]
            }}
            
            DOM√çNIOS SUPORTADOS:
            fintech, healthcare, education, ecommerce, industry, real_estate, 
            automotive, gaming, media, legal, food_beverage, travel, hr, 
            analytics, security, generic
            
            IMPORTANTE: 
            - Use um dos dom√≠nios listados ou "generic" se n√£o houver match
            - Foque no setor/prop√≥sito do neg√≥cio, n√£o na tecnologia
            - Seja espec√≠fico para melhor personaliza√ß√£o do sistema
            """

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system",
                        "content": "Voc√™ detecta contexto de projetos de qualquer dom√≠nio.",
                    },
                    {"role": "user", "content": prompt},
                ],
                temperature=0.1,
                max_tokens=300,
                response_format={"type": "json_object"},
            )

            return json.loads(response.choices[0].message.content)

        except Exception as e:
            logger.warning(f"AI context detection failed: {e}")
            return {"context": "generic", "confidence": 0.5}

    def _apply_domain_knowledge(self, domain: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Aplica conhecimento espec√≠fico do dom√≠nio detectado."""
        if domain not in self.domain_knowledge:
            return {}

        context = self.domain_knowledge[domain]

        domain_insights = {
            "automatic_assumptions": context.automatic_assumptions.copy(),
            "implied_requirements": context.implied_requirements.copy(),
            "typical_integrations": context.typical_integrations.copy(),
            "compliance_requirements": context.compliance_requirements.copy(),
        }

        # Adicionar insights espec√≠ficos baseado na an√°lise
        if analysis.get("implicit_info", {}).get("implied_data_sensitivity"):
            domain_insights["automatic_assumptions"]["requires_data_protection"] = True

        return domain_insights

    def _identify_obvious_answers(
        self, intake_text: str, analysis: Dict[str, Any], domain_insights: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Identifica respostas que s√£o √≥bvias pelo contexto."""
        obvious = {}

        # Respostas √≥bvias da an√°lise GPT
        obvious_chars = analysis.get("obvious_characteristics", {})
        for key, value in obvious_chars.items():
            if value and value != "null":
                obvious[key] = value

        # Respostas √≥bvias do dom√≠nio
        auto_assumptions = domain_insights.get("automatic_assumptions", {})
        for key, value in auto_assumptions.items():
            if value is not None:
                obvious[key] = value

        # An√°lise espec√≠fica por keywords
        text_lower = intake_text.lower()

        # Dados sens√≠veis
        sensitive_keywords = [
            "fintech",
            "banco",
            "financeiro",
            "investimento",
            "sa√∫de",
            "m√©dico",
            "cpf",
            "dados pessoais",
        ]
        if any(kw in text_lower for kw in sensitive_keywords):
            obvious["handles_sensitive_data"] = True
            obvious["requires_high_security"] = True

        # Tipo de aplica√ß√£o
        if any(kw in text_lower for kw in ["dashboard", "web", "sistema", "plataforma"]):
            obvious["application_type"] = "web"

        if "mobile" in text_lower or "app " in text_lower:
            if "web" in obvious.get("application_type", ""):
                obvious["application_type"] = "hybrid"
            else:
                obvious["application_type"] = "mobile"

        return obvious

    async def _identify_redundant_questions(
        self, obvious_answers: Dict[str, Any], analysis: Dict[str, Any]
    ) -> Set[str]:
        """Identifica IDs de perguntas que s√£o redundantes dado o contexto."""
        redundant = set()

        # Mapeamento de respostas √≥bvias para IDs de perguntas
        question_mappings = {
            "application_type": ["B001", "F001"],  # Se tipo de app √© √≥bvio
            "handles_sensitive_data": ["Q_DADOS_SENSIVEIS", "B008"],  # Se dados sens√≠veis √© √≥bvio
            "primary_purpose": ["Q_FINALIDADE", "B002"],  # Se finalidade √© √≥bvia
            "target_audience": ["Q_PUBLICO", "B010"],  # Se p√∫blico √© √≥bvio
            "business_model": ["B010"],  # Se modelo de neg√≥cio √© √≥bvio
        }

        # Adicionar perguntas redundantes baseado nas respostas √≥bvias
        for obvious_key, obvious_value in obvious_answers.items():
            if obvious_key in question_mappings and obvious_value:
                question_ids = question_mappings[obvious_key]
                redundant.update(question_ids)

        # Funcionalidades j√° mencionadas
        mentioned_features = analysis.get("explicit_info", {}).get("mentioned_features", [])
        if mentioned_features:
            # Se funcionalidades j√° foram descritas em detalhes
            if len(mentioned_features) >= 3:
                redundant.add("Q_DESC_GERAL")  # N√£o pedir descri√ß√£o novamente
                redundant.add("F002")  # N√£o pedir funcionalidades principais

        # Tecnologias j√° mencionadas
        mentioned_techs = analysis.get("explicit_info", {}).get("mentioned_technologies", [])
        if mentioned_techs:
            redundant.add("T001")  # N√£o pedir prefer√™ncias de tech se j√° mencionou

        return redundant

    def _suggest_focus_areas(
        self, analysis: Dict[str, Any], obvious_answers: Dict[str, Any]
    ) -> List[str]:
        """Sugere √°reas que ainda precisam ser exploradas."""
        focus = []

        missing_info = analysis.get("missing_info", [])
        focus.extend(missing_info)

        # √Åreas padr√£o a focar se n√£o foram cobertas
        standard_areas = [
            "requisitos n√£o-funcionais espec√≠ficos",
            "integra√ß√µes necess√°rias",
            "cronograma e or√ßamento",
            "equipe e recursos dispon√≠veis",
        ]

        # Adicionar √°reas padr√£o que n√£o est√£o nas respostas √≥bvias
        for area in standard_areas:
            area_covered = any(
                area.lower() in str(value).lower()
                for value in obvious_answers.values()
                if isinstance(value, str)
            )
            if not area_covered:
                focus.append(area)

        return focus[:5]  # Limitar a 5 √°reas principais

    def _compile_inferred_info(
        self, analysis: Dict[str, Any], domain_insights: Dict[str, Any]
    ) -> List[InferredInformation]:
        """Compila todas as informa√ß√µes inferidas em estruturas padronizadas."""
        inferred = []

        # Informa√ß√µes impl√≠citas
        implicit = analysis.get("implicit_info", {})
        for key, value in implicit.items():
            if value and value != "null":
                inferred.append(
                    InferredInformation(
                        category="implicit",
                        key=key,
                        value=value,
                        confidence=InferenceConfidence.LIKELY,
                        reasoning=f"Inferido pela an√°lise do contexto: {key}",
                        evidence=[],
                    )
                )

        # Caracter√≠sticas √≥bvias
        obvious = analysis.get("obvious_characteristics", {})
        for key, value in obvious.items():
            if value and value != "null":
                inferred.append(
                    InferredInformation(
                        category="obvious",
                        key=key,
                        value=value,
                        confidence=InferenceConfidence.CERTAIN,
                        reasoning=f"√ìbvio pelo contexto fornecido: {key}",
                        evidence=[],
                    )
                )

        # Assumptions do dom√≠nio
        auto_assumptions = domain_insights.get("automatic_assumptions", {})
        for key, value in auto_assumptions.items():
            if value is not None:
                inferred.append(
                    InferredInformation(
                        category="domain_assumption",
                        key=key,
                        value=value,
                        confidence=InferenceConfidence.LIKELY,
                        reasoning="Assumption autom√°tica baseada no dom√≠nio detectado",
                        evidence=[],
                    )
                )

        return inferred

    def _generate_cache_key(self, intake_text: str) -> str:
        """Gera chave √∫nica para cache baseada no texto."""
        import hashlib

        return hashlib.md5(intake_text.encode()).hexdigest()

    def get_exclusion_rules_for_question(self, question_id: str, result: InferenceResult) -> bool:
        """
        Determina se uma pergunta deve ser exclu√≠da baseado na infer√™ncia.

        Args:
            question_id: ID da pergunta
            result: Resultado da infer√™ncia de contexto

        Returns:
            True se a pergunta deve ser exclu√≠da (redundante)
        """
        return question_id in result.redundant_question_ids

    def get_context_enhancement(self, result: InferenceResult) -> Dict[str, Any]:
        """
        Retorna informa√ß√µes para enriquecer o contexto de pontua√ß√£o.

        Returns:
            Dicion√°rio com informa√ß√µes para o ScoringContext
        """
        return {
            "detected_domain": result.detected_domain,
            "domain_confidence": result.domain_confidence,
            "classified_tags": [info.key for info in result.inferred_info],
            "obvious_answers": result.obvious_answers,
            "focus_areas": result.focus_areas,
            "project_complexity": self._infer_complexity(result),
        }

    def _infer_complexity(self, result: InferenceResult) -> str:
        """Infere complexidade do projeto baseado nas informa√ß√µes."""
        complexity_indicators = 0

        # Verificar indicadores de complexidade
        for info in result.inferred_info:
            if info.key in ["implied_data_sensitivity", "requires_high_security"]:
                complexity_indicators += 1
            elif info.key == "implied_compliance_needs" and isinstance(info.value, list):
                complexity_indicators += len(info.value)

        if complexity_indicators >= 3:
            return "high"
        elif complexity_indicators >= 1:
            return "medium"
        else:
            return "low"

    async def explain_inference(self, intake_text: str, result: InferenceResult) -> str:
        """
        Gera explica√ß√£o detalhada das infer√™ncias feitas.

        Returns:
            Explica√ß√£o em texto natural das infer√™ncias
        """
        explanation_parts = []

        if result.detected_domain:
            explanation_parts.append(
                f"üéØ **Dom√≠nio detectado**: {result.detected_domain} "
                f"(confian√ßa: {result.domain_confidence:.0%})"
            )

        if result.obvious_answers:
            explanation_parts.append(
                f"‚úÖ **Informa√ß√µes √≥bvias identificadas**: "
                f"{', '.join(result.obvious_answers.keys())}"
            )

        if result.redundant_question_ids:
            explanation_parts.append(
                f"üö´ **Perguntas redundantes filtradas**: "
                f"{len(result.redundant_question_ids)} perguntas"
            )

        if result.focus_areas:
            explanation_parts.append(
                f"üîç **√Åreas de foco sugeridas**: " f"{', '.join(result.focus_areas[:3])}"
            )

        explanation_parts.append(f"üìù **Resumo**: {result.reasoning_summary}")

        return "\n\n".join(explanation_parts)

    def get_inference_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas do motor de infer√™ncia."""
        return {
            "total_inferences": len(self.inference_cache),
            "supported_domains": list(self.domain_knowledge.keys()),
            "cache_size": len(self.inference_cache),
            "model_used": self.model,
        }
